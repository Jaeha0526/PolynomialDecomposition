(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



JF$Tokenize[line_String]:=StringSplit[line," "]/.{
a_String/;StringMatchQ[a,NumberString]:>ToExpression[a],
str_String/;StringMatchQ[str,"a"~~(DigitCharacter...)]:>symbol[str]
};
JF$ParseSymbol[symbol[sym_]]:=symbol[sym]/.symbol[str_String]/;StringMatchQ[str,"a"~~(DigitCharacter...)]:>a[ToExpression[StringTake[str,2;;-1]]];


JF$Parser[line_String]:=Module[{result,tail},
{result,tail}=JFP$Read[JF$Tokenize[line]];
If[Length@tail!=0,Print["JFormat$Parser failure : tail=!={}"];Abort[]];
result/.{
head["+"]:>Plus,head["*"]:>Times,head["^"]:>Power,s_symbol:>JF$ParseSymbol[s]}
];


Clear[JFP$Read,JFP$ReadN,head];
JFP$ReadN[n_/;n>0,list_List]:=Module[{term1,tail,termrest},
{term1,tail}=JFP$Read[list];
{termrest,tail}=JFP$ReadN[n-1,tail];
{Prepend[termrest,term1],tail}];
JFP$ReadN[0,list_List]:={{},list};

JFP$Read[{"P",num_,rest___}]:={num,{rest}};
JFP$Read[{"N",num_,rest___}]:={-num,{rest}};
JFP$Read[{symbol[sym_],rest___}]:={symbol[sym],{rest}};
JFP$Read[{op:("+"|"*"|"^"),rest___}]:=Module[{t1,t2,tail},
{{t1,t2},tail}=JFP$ReadN[2,{rest}];
{head[op][t1,t2],tail}
];


MMAExprToJFString$NumberFormat[num_Integer]:=num/.{a_Integer/;Negative[a]:>"N "<>ToString[-a],a_Integer/;Positive[a]:>"P "<>ToString[a]};


MMAExprToJFString[expr_]:=Module[{},
ToPrefixNotation[expr]/.{
{a,i_}:>{"a"<>ToString[i]}
}/.{Plus->"+",Power->"^",Times->"*"}/.{a_Integer:>MMAExprToJFString$NumberFormat[a]}//Flatten//StringRiffle
];



